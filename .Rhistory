library(shiny)
source('/media/fbraza/Data/02-DSTI-Master/06-R-for-BigData/Lecture/first_shiny/app.R')
shinyApp(ui, server)
shinyApp(ui, server)
shinyApp(ui, server)
shinyApp(ui, server)
shinyApp(ui, server)
shinyApp(ui, server)
shinyApp(ui, server)
library(shiny)
library(ggplot2)
consoleReactive(TRUE)
shinyApp(ui, server)
shinyApp(ui, server)
library(shiny)
library(ggplot2)
consoleReactive(TRUE)
# tranforming data
data(swiss)
swiss$Religion <- (swiss$Catholic > 50) + 0
swiss$Religion[swiss$Religion == 0] <- "Protestant"
swiss$Religion[swiss$Religion == 1] <- "Catholic"
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("Evaluate difference between Catholics and
Protestants in the 19th century"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
selectInput(inputId  = "cat", h3("Choose a category"),
choices  = c("Education", "Fertility"),
selected = "Education")
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "box_plot")
)
)
)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
output$box_plot <- renderPlot({
ggplot(data = swiss) +
geom_boxplot(aes(x = "", y = Education)) +
facet_wrap(~Religion)
})
}
shinyApp(ui, server)
shinyApp(ui, server)
shinyApp(ui, server)
shinyApp(ui, server)
library(shiny)
library(ggplot2)
consoleReactive(TRUE)
# tranforming data
data(swiss)
swiss$Religion <- (swiss$Catholic > 50) + 0
swiss$Religion[swiss$Religion == 0] <- "Protestant"
swiss$Religion[swiss$Religion == 1] <- "Catholic"
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("Evaluate difference between Catholics and
Protestants in the 19th century"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
selectInput(inputId  = "cat", h3("Choose a category"),
choices  = c("Education", "Fertility"),
selected = "Education")
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "box_plot")
)
)
)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
output$box_plot <- renderPlot({
data_category <- switch(input$cat,
"Fertility" = swiss$Fertility,
"Education" = swiss$Education)
ggplot(data = swiss) +
geom_boxplot(aes(x = "", y = data_category)) +
facet_wrap(~Religion)
})
}
shinyApp(ui, server)
library(dplyr)
data <- read.table("AirBnB.Rdata")
data <- read.table("./AirBnB.Rdata")
data <- read.table("/media/fbraza/Data/02-DSTI-Master/06-R-for-BigData/lecture/AirBnB.Rdata")
data <- load("/media/fbraza/Data/02-DSTI-Master/06-R-for-BigData/lecture/AirBnB.Rdata")
load("/media/fbraza/Data/02-DSTI-Master/06-R-for-BigData/Lecture/AirBnB.Rdata")
rm(list-ls())
rm(list=ls())
load("/media/fbraza/Data/02-DSTI-Master/06-R-for-BigData/Lecture/AirBnB.Rdata")
View(L)
View(R)
View(R)
airbnb <- read.table("/media/fbraza/Data/02-DSTI-Master/06-R-for-BigData/Lecture/AirBnB.Rdata")
setwd("/media/fbraza/Data/02-DSTI-Master/06-R-for-BigData/Lecture")
airbnb <- load("/media/fbraza/Data/02-DSTI-Master/06-R-for-BigData/Lecture/AirBnB.Rdata")
R
r_variables <- colnames(L)
r_variables
#
library(dplyr)
features_and_price <- r_variables %>% select(c("property_type"))
features_and_price <- r_variables %>% select(property_type)
features_and_price <- r_variables %>% select_(property_type)
features_and_price <- select(r_variables, property_type)
library(dplyr)
library(dplyr)
library(readr)
r_variables <- read_table(L)
r_variables <- read_table("L")
rm(list=ls())
airbnb <- load("/media/fbraza/Data/02-DSTI-Master/06-R-for-BigData/Lecture/AirBnB.Rdata")
library(dplyr)
library(readr)
r_variables <- colnames(L)
table_r <- colnames(L)
features_and_prices <- table_r[ ,c("property_type")]
features_and_prices <- table_r[ , "property_type"]
features_and_prices <- table_r[ , property_type]
table_r
names_of_columns <- colnames(L)
features_and_price <- L %>%
select(property_type)
View(features_and_price)
